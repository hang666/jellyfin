# DESIGNED FOR BUILDING ON ARM64 ONLY
#####################################
# Requires binfm_misc registration
# https://github.com/multiarch/qemu-user-static#binfmt_misc-register
ARG DOTNET_VERSION=6.0


FROM node:lts-alpine as web-builder
ARG JELLYFIN_WEB_VERSION=master
RUN apk add curl git zlib zlib-dev autoconf g++ make libpng-dev gifsicle alpine-sdk automake libtool make gcc musl-dev nasm python3 \
 && curl -L https://github.com/jellyfin/jellyfin-web/archive/${JELLYFIN_WEB_VERSION}.tar.gz | tar zxf - \
 && cd jellyfin-web-* \
 && npm ci --no-audit --unsafe-perm \
 && mv dist /dist

FROM multiarch/qemu-user-static:x86_64-aarch64 as qemu
FROM arm64v8/debian:stable-slim as app

# https://askubuntu.com/questions/972516/debian-frontend-environment-variable
ARG DEBIAN_FRONTEND="noninteractive"
# http://stackoverflow.com/questions/48162574/ddg#49462622
ARG APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
# https://github.com/NVIDIA/nvidia-docker/wiki/Installation-(Native-GPU-Support)
ENV NVIDIA_DRIVER_CAPABILITIES="compute,video,utility"

COPY --from=qemu /usr/bin/qemu-aarch64-static /usr/bin

RUN apt-get update \
 && apt-get install --no-install-recommends --no-install-suggests -y gnupg wget apt-transport-https \
 && apt-get install --no-install-recommends --no-install-suggests -y \
   mesa-va-drivers \
   openssl

# curl: healcheck
RUN apt-get update && apt-get install --no-install-recommends --no-install-suggests -y \
 ffmpeg \
 libssl-dev \
 ca-certificates \
 libfontconfig1 \
 libfreetype6 \
 libomxil-bellagio0 \
 libomxil-bellagio-bin \
 locales \
 curl \
 && apt-get install --no-install-recommends --no-install-suggests -y autoconf automake build-essential cmake debhelper fakeroot git-core libass-dev libfreetype6-dev libsdl2-dev libtool libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev pkg-config texinfo wget zlib1g-dev \
 && apt-get -y install nasm \
 && apt-get -y install yasm

RUN echo "deb http://www.deb-multimedia.org stretch main non-free" >> /etc/apt/sources.list \
 && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 5C808C2B65558117 \
 && apt-get update

RUN apt-get install --no-install-recommends --no-install-suggests -y libdrm-dev libx264-dev libx265-dev libnuma-dev libvpx-dev libmp3lame-dev libopus-dev

RUN apt-get install --no-install-recommends --no-install-suggests -y libfdk-aac-dev

ARG FFMPEG_COMPILE_DIR=/ffmped_dir
ARG FFMPEG_SOURCES=$FFMPEG_COMPILE_DIR/ffmpeg_sources
ARG LIBAOM_SOURCES=$FFMPEG_COMPILE_DIR/libaom_sources
ARG MPP_SOURCES=$FFMPEG_COMPILE_DIR/mpp_sources
ARG FFMPEG_BIN=$FFMPEG_COMPILE_DIR/ffmpeg_bin
ARG LIBAOM_BIN=$FFMPEG_COMPILE_DIR/libaom_bin
ARG FFMPEG_BUILD=$FFMPEG_COMPILE_DIR/ffmpeg_build
ARG LIBAOM_BUILD=$LIBAOM_SOURCES/aom_build
ARG PKG_CONFIG_PATH=$FFMPEG_BUILD/lib/pkgconfig

RUN mkdir -p $FFMPEG_COMPILE_DIR $FFMPEG_SOURCES $LIBAOM_SOURCES $MPP_SOURCES $FFMPEG_BIN $LIBAOM_BIN $FFMPEG_BUILD $LIBAOM_BUILD $PKG_CONFIG_PATH \
 && cd ${LIBAOM_SOURCES} \
 && if [ ! -d aom ]; then git clone --depth 1 https://aomedia.googlesource.com/aom ; fi \
 && cd aom \
 && git pull \
 && cd ${LIBAOM_SOURCES}/aom_build \
 && PATH="${LIBAOM_BIN}:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="${LIBAOM_BUILD}" -DENABLE_SHARED=off -DENABLE_NASM=on ../aom \
 && cd ${LIBAOM_SOURCES}/aom_build \
 && PATH="${LIBAOM_BIN}:$PATH" make -j8 \
 && cd ${LIBAOM_SOURCES}/aom_build \
 && make install \
 && chmod 755 ${LIBAOM_BUILD}/aom.pc && cp ${LIBAOM_BUILD}/aom.pc ${PKG_CONFIG_PATH}
 
 RUN cd ${MPP_SOURCES} \
 && if [ ! -d mpp ]; then git clone https://github.com/rockchip-linux/mpp.git ; fi \
 && cd mpp \
 && git pull \
 && cmake -DRKPLATFORM=ON -DHAVE_DRM=ON \
 && cd ${MPP_SOURCES}/mpp \
 && make -j8 \
 && make install \
 && cd .. \
 && chmod 755 ${MPP_SOURCES}/mpp/rockchip_mpp.pc ${MPP_SOURCES}/mpp/rockchip_vpu.pc && cp ${MPP_SOURCES}/mpp/rockchip_mpp.pc ${MPP_SOURCES}/mpp/rockchip_vpu.pc ${PKG_CONFIG_PATH}
 
 ARG ffmpeg_source_dir="ffmpeg-rockchip"
RUN cd ${FFMPEG_SOURCES} \
 && if [ ! -d ${ffmpeg_source_dir} ]; then git clone https://github.com/FFmpeg/FFmpeg.git ${ffmpeg_source_dir} ; fi \
 && cd ${ffmpeg_source_dir} \
 && git pull \
 && cp ${PKG_CONFIG_PATH}/* ${FFMPEG_SOURCES}/${ffmpeg_source_dir} \
 && cp ${PKG_CONFIG_PATH}/* ${FFMPEG_BIN} \
 && chmod +x configure \
 && chmod 755 configure 

RUN cd ${FFMPEG_SOURCES}/${ffmpeg_source_dir} && PATH="${FFMPEG_BIN}:$PATH" ./configure \
  --prefix="${FFMPEG_BUILD}" \
  --pkg-config-flags="--static" \
  --extra-cflags="-I${FFMPEG_BUILD}/include" \
  --extra-ldflags="-L${FFMPEG_BUILD}/lib" \
  --extra-libs="-lpthread -lm" \
  --bindir="${FFMPEG_BIN}" \
  --disable-v4l2-m2m \
  --enable-gpl \
  --enable-libaom \
  --enable-libass \
  --enable-libfdk-aac \
  --enable-libfreetype \
  --enable-libmp3lame \
  --enable-libopus \
  --enable-libvorbis \
  --enable-libvpx \
  --enable-libx264 \
  --enable-rkmpp \
  --enable-version3 \
  --enable-libdrm \
  --enable-libx265 \
  --enable-nonfree

RUN cd ${FFMPEG_SOURCES}/${ffmpeg_source_dir} \
 && PATH="${FFMPEG_BIN}:$PATH" make -j8

RUN cp ${FFMPEG_SOURCES}/${ffmpeg_source_dir}/ffmpeg ${FFMPEG_SOURCES}/${ffmpeg_source_dir}/ffprobe /usr/local/bin \
 && apt-get clean autoclean -y \
 && apt-get autoremove -y \
 && rm -rf /var/lib/apt/lists/* \
 && mkdir -p /cache /config /media \
 && chmod 777 /cache /config /media \
 && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && locale-gen

# ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en

FROM mcr.microsoft.com/dotnet/sdk:${DOTNET_VERSION} as builder
WORKDIR /repo
COPY . .
ENV DOTNET_CLI_TELEMETRY_OPTOUT=1
# Discard objs - may cause failures if exists
RUN find . -type d -name obj | xargs -r rm -r
# Build
RUN dotnet publish Jellyfin.Server --configuration Release --output="/jellyfin" --self-contained --runtime linux-arm64 "-p:DebugSymbols=false;DebugType=none"

FROM app

ENV HEALTHCHECK_URL=http://localhost:8096/health

COPY --from=builder /jellyfin /jellyfin
COPY --from=web-builder /dist /jellyfin/jellyfin-web

EXPOSE 8096
VOLUME /cache /config
ENTRYPOINT ["./jellyfin/jellyfin", \
    "--datadir", "/config", \
    "--cachedir", "/cache", \
    "--ffmpeg", "/usr/local/bin/ffmpeg"]

HEALTHCHECK --interval=30s --timeout=30s --start-period=10s --retries=3 \
     CMD curl -Lk "${HEALTHCHECK_URL}" || exit 1
